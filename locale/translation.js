// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Flash');
gettext('Flash-bus');
gettext('SPI');
gettext('flash-read-16-sys-zero');
gettext('flash-read16: Read a half word (16-bits) from the flash');
gettext('flash-controller. SPI-flash memory controller, with initialization');
gettext('sys-spi-tx-bus. SPI transmitter at system clock speed. Bus input');
gettext('sys-spi-tx. SPI transmitter at system clock speed');
gettext('Constant bit 1');
gettext('NOT gate (Verilog implementation)');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('Two bits input And gate');
gettext('OR2: Two bits input OR gate');
gettext('08-Sys-SL-ld: 8 bits system shift left register, with load. Verilog implementation');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('07-Sys-SR: 7 bits system shift right register. Verilog implementation');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('Constant bit 0');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Bus-SPI-split: Obtener todas las señales del Bus SPI del controlador');
gettext('Join-SPI-Bus: Join all the fields into one SPI bus');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('6-bits Syscounter with reset');
gettext('Inc1-6bit: Increment a 6-bits number by one');
gettext('AdderK-6bit: Adder of 6-bit operand and 6-bit constant');
gettext('Adder-6bits: Adder of two operands of 6 bits');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus6-Join-1-5: Join the two buses into a 6-bits Bus');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('06-Sys-reg-rst: 6 bits system register with reset. Verilog implementation');
gettext('spi-write-k-byte: Write a constant byte to SPI though the spi-bus');
gettext('spi-write-byte: Write a byte to SPI though the spi-bus');
gettext('BUSF-access-11-9-bits: Access to a 11-bit BUSF, with 9-bits data field');
gettext('Bus11-Split-2-9: Split the 11-bits bus into two buses of 2 and 9 wires');
gettext('Unibus-access-9-bits: Access to a 9-bit unidirectional bus');
gettext('2-to-1 Multplexer (9-bit channels). Verilog implementation');
gettext('Bus11-Join-2-9: Join the two buses into an 11-bits Bus');
gettext('Bus8-Join-1-8: Join the two buses into an 9-bits Bus');
gettext('flash-read16-bus: Read a half-word (16-bits) from the flash. Little endian');
gettext('Bus24-Split-one-third: Split the 24-bits bus into three buses of  the same size');
gettext('08-Sys-SL: 8 bits system shift left register. Verilog implementation');
gettext('08-Reg: 8 bits Register. Verilog implementation');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Tic que se activa transcurridos  \n64 ciclos de reloj');
gettext('Parar el contador  \ntranscurridos los 64 ciclos');
gettext('## Inicializacion');
gettext('* **Fase 1**: Espera de 64 ciclos');
gettext('* **Fase 2**: Envío del comando WAKEUP');
gettext('* **Fase 3**: Inicialización completada');
gettext('Bus-Spli-split');
gettext('Obtener el dato a enviar y la señal  \nde control de comienzo de la transmisión');
gettext('Transmisor \ndel SPI');
gettext('Sacar por el bus las señales de  \nRealimentación (busy, done)  \nY los valores por defecto para  \ndata y start');
gettext('Es la inversa del estado del transmisor');
gettext('Sys-SL-ld');
gettext('## Transmisor del dato');
gettext('Encender transmisor');
gettext('Apagar transmisor');
gettext('##  Estado del transmisor\n\n');
gettext('* `0`: Apagado\n* `1`: Transmitiendo');
gettext('**Estado 0**: Carga del dato  \nen el registro de desplazamiento');
gettext('**Estado 1**: Transmisión del dato');
gettext('## Unidad de control\n\n');
gettext('Es un autómata que pasa secuencialmente por dos estados:\n* Primero uno carga del dato\n* Después otro de transmisión del dato');
gettext('Se pone a `1` cuando ha pasado  \npor los dos estados  \n(y por tanto ha terminado)');
gettext('##  BUS SPI\n\n');
gettext('### Generación del Reloj del SPI\n\n* Sólo se genera durante la transisión\n* Polaridad = 1: En reposo el reloj está a 1');
gettext('### Generación del slave select\n\nSe pone a 0 cuando hay transmisión y  \na 1 cuando está en reposo');
gettext('Input');
gettext('Output');
gettext('Load external data');
gettext('External data');
gettext('Serial input');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('* **Circuit state**:\n  * **0**: IDLE\n  * **1**: Transmiting');
gettext('`done` signal is only valid  \nif the block is busy');
gettext('Group the data and  \nwrite signal into  \na Bus');
gettext('Transmit the byte');
gettext('The byte has been  \nwritten!');
gettext('Inyectar en el bus de campos');
gettext('Las señales de feedback pasan  \na través sin modificación');
gettext('## Captura del dato leido de la memoria flash');
gettext('Conversion serie-paralelo');
gettext('Capturar el dato');
gettext('Un ciclo después de que se active  \n`byte` el dato está disponible');
gettext('flash-read-32-sys-zero');
gettext('flash-read32: Read a word (32-bits) from the flash');
gettext('flash-read32-bus: Read a word (32-bits) from the Flash (Little endian)');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('flash-read-8-sys-zero');
gettext('flash-read8: Read a byte from the flash');
gettext('flash-read8-bus: Read a byte from the flash');
gettext('En el siguiente ciclo el identificador  \nse puede capturar externamente');
gettext('Comando');
gettext('Dirección');
gettext('Dummy');
gettext('flash-read-id-sys-zero');
gettext('flash-readid-bus: Read flash identification');
gettext('Bus24-Join-one-third: Join the three buses into an 24-bits Bus');
gettext('OR4-verilog: 4-bits input OR gate. Verilog implementation');
gettext('## Lectura del identificador');
gettext('## Lectura del segundo byte del identificador');
gettext('## Conversion serie-paralelo');
gettext('Un ciclo después de que se active  \n`manufac` el dato está disponible');
gettext('El siguiente ciclo el identificador  \nse puede capturar externamente');
gettext('## Lectura del primer byte del identificador');
gettext('## Lectura del tercer byte del identificador');
gettext('flash-controller0');
gettext('flash-read16-bus');
gettext('flash-read32-bus');
gettext('flash-read8-bus');
gettext('flash-readid-bus');
gettext('16-read16');
gettext('20-flash-read16');
gettext('21-flash-read32');
gettext('Join-spi-bus');
gettext('SPI-write-byte');
gettext('SPI-write-k-byte');
gettext('Split-spi-bus');
gettext('Sys-spi-tx-bus');
gettext('Sys-spi-tx');
gettext('Test-sevilla-02');
gettext('00-index');
gettext('flash-read-id-sys-zero: Read the flash identification');
gettext('# Index');
gettext('## NIVEL 0');
gettext('## NIVEL 1');
gettext('## NIVEL 2');
gettext('## NIVEL 3');
gettext('## NIVEL 4');
gettext('00-index');
